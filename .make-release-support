#!/bin/bash

# Function to get current version
getVersion() {
    grep '"version":' package.json | sed -E 's/.*"version": "(.*)".*/\1/'
}

# Function to get next major version
nextMajorLevel() {
    current_version=$(getVersion)
    major=$(echo $current_version | cut -d. -f1)
    new_major=$((major + 1))
    echo "$new_major.0.0"
}

# Function to get next minor version
nextMinorLevel() {
    current_version=$(getVersion)
    major=$(echo $current_version | cut -d. -f1)
    minor=$(echo $current_version | cut -d. -f2)
    new_minor=$((minor + 1))
    echo "$major.$new_minor.0"
}

# Function to get next micro version
nextMicroLevel() {
    current_version=$(getVersion)
    major=$(echo $current_version | cut -d. -f1)
    minor=$(echo $current_version | cut -d. -f2)
    micro=$(echo $current_version | cut -d. -f3)
    new_micro=$((micro + 1))
    echo "$major.$minor.$new_micro"
}

# Function to set the release version
setRelease() {
    new_version=$1
    sed -i.bak 's/"version": "[^"]*"/"version": "'$new_version'"/' package.json && rm package.json.bak
}

# Function to check if tag exists
tagExists() {
    git rev-parse $1 >/dev/null 2>&1
}

# Function to check if current state differs from release
differsFromRelease() {
    ! git diff --quiet $1
}

# Function to check if there are uncommitted changes
hasChanges() {
    ! git diff-index --quiet HEAD --
}

# Function to get current tag
getTag() {
    current_version=$(getVersion)
    echo "v$current_version"
}
